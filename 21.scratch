0 seti 123 0 4
1 bani 4 456 4
2 eqri 4 72 4
3 addr 4 2 2
4 seti 0 0 2
5 seti 0 5 4
6 bori 4 65536 5
7 seti 1765573 9 4
8 bani 5 255 1
9 addr 4 1 4
10 bani 4 16777215 4
11 muli 4 65899 4
12 bani 4 16777215 4
13 gtir 256 5 1
14 addr 1 2 2
15 addi 2 1 2
16 seti 27 0 2
17 seti 0 8 1
18 addi 1 1 3
19 muli 3 256 3
20 gtrr 3 5 3
21 addr 3 2 2
22 addi 2 1 2
23 seti 25 1 2
24 addi 1 1 1
25 seti 17 7 2
26 setr 1 4 5
27 seti 7 6 2
28 eqrr 4 0 1
29 addr 1 2 2
30 seti 5 2 2



===============================================

0 seti 123 (0) reg4
1 bani reg4 & 456 -> reg4
2 eqri reg4 == 72 -> reg4
3 addr reg4 + reg2 -> reg2
4 seti 0 (0) reg2
5 seti 0 (5) reg4
6 bori reg4 | 65536 -> reg5
7 seti 1765573 (9) reg4
8 bani reg5 & 255 -> reg1
9 addr reg4 + reg1 -> reg4
10 bani reg4 & 16777215 -> reg4
11 muli reg4 * 65899 -> reg4
12 bani reg4 & 16777215 -> reg4
13 gtir 256 > reg5 -> reg1
14 addr reg1 + reg2 -> reg2
15 addi reg2 + 1 -> reg2
16 seti 27 (0) reg2
17 seti 0 (8) reg1
18 addi reg1 + 1 -> reg3
19 muli reg3 * 256 reg3
20 gtrr reg3 > reg5 -> reg3
21 addr reg3 + reg2 -> reg2
22 addi reg2 + 1 -> reg2
23 seti 25 (1) reg2
24 addi reg1 + 1 -> reg1
25 seti 17 (7) reg2
26 setr reg1 (4) reg5
27 seti reg7 (6) reg2
28 eqrr reg4 == reg0 -> reg1
29 addr reg1 + reg2 -> reg2
30 seti 5 (2) reg2


===============================================

0 seti 123 (0) reg4			// reg4 <- 123

LOOP72:
1 bani reg4 & 456 -> reg4
2 eqri reg4 == 72 -> reg4			// reg4 = reg4&456
3 addr reg4 + reg2 -> reg2		
4 seti 0 (0) reg2				// if reg4 != 72: jmp 1 (LOOP72)

5 seti 0 (5) reg4				// reg4 = 0
6 bori reg4 | 65536 -> reg5		// reg5 = reg4 | 65536

RANDOLOOP:
7 seti 1765573 (9) reg4			// reg4 = 1765573
8 bani reg5 & 255 -> reg1			// reg1 = reg5 & 255
9 addr reg4 + reg1 -> reg4		// reg4 = reg4 + reg1
10 bani reg4 & 16777215 -> reg4	// reg4 = reg4 & 16777215
11 muli reg4 * 65899 -> reg4		// reg4 = reg4 * 65899
12 bani reg4 & 16777215 -> reg4	// reg4 = reg4 & 16777215
13 gtir 256 > reg5 -> reg1		// ...
14 addr reg1 + reg2 -> reg2		// ...
15 addi reg2 + 1 -> reg2			// ...
16 seti 27 (0) reg2			// if reg5 <= 256: jmp 28 (ENDCHECK)

17 seti 0 (8) reg1				// reg1 = 0

INNERLOOP:
18 addi reg1 + 1 -> reg3			// reg3 = reg1 + 1
19 muli reg3 * 256 reg3			// reg3 = reg3 * 256
20 gtrr reg3 > reg5 -> reg3		// ...
21 addr reg3 + reg2 -> reg2		// ...
22 addi reg2 + 1 -> reg2			// ...
23 seti 25 (1) reg2			// if reg3 > reg5: jmp 26 (OUTEXIT)
24 addi reg1 + 1 -> reg1			// reg1++
25 seti 17 (7) reg2			// jmp INNERLOOP

OUTEXIT:
26 setr reg1 (4) reg5			// reg5 = reg1
27 seti 7 (6) reg2				// jmp OUTERLOOP

ENDCHECK
28 eqrr reg4 == reg0 -> reg1
29 addr reg1 + reg2 -> reg2
30 seti 5 (2) reg2


===============================================

0 seti 123 (0) reg4			// reg4 <- 123

LOOP72:
1 bani reg4 & 456 -> reg4
2 eqri reg4 == 72 -> reg4			// reg4 = reg4&456
3 addr reg4 + reg2 -> reg2		
4 seti 0 (0) reg2				// if reg4 != 72: jmp 1 (LOOP72)

5 seti 0 (5) reg4				// ... ... reg4 = 0

FUCKYLOOP
6 bori reg4 | 65536 -> reg5		// reg5 = reg4 | 65536

7 seti 1765573 (9) reg4			// reg4 = 1765573

OUTERLOOP:
8 bani reg5 & 255 -> reg1			// reg1 = reg5 & 255
9 addr reg4 + reg1 -> reg4		// reg4 = reg4 + reg1
10 bani reg4 & 16777215 -> reg4	// reg4 = reg4 & 16777215
11 muli reg4 * 65899 -> reg4		// reg4 = reg4 * 65899
12 bani reg4 & 16777215 -> reg4	// reg4 = reg4 & 16777215
13 gtir 256 > reg5 -> reg1		// ...
14 addr reg1 + reg2 -> reg2		// ...
15 addi reg2 + 1 -> reg2			// ...
16 seti 27 (0) reg2			// if reg5 < 256: jmp 28 (ENDCHECK)

17 seti 0 (8) reg1				// reg1 = 0

INNERLOOP: (finds in reg1 the smallest integer such that ((reg1+1) + 256) > reg5
18 addi reg1 + 1 -> reg3			// reg3 = reg1 + 1
19 muli reg3 * 256 reg3			// reg3 = reg3 * 256
20 gtrr reg3 > reg5 -> reg3		// ...
21 addr reg3 + reg2 -> reg2		// ...
22 addi reg2 + 1 -> reg2			// ...
23 seti 25 (1) reg2			// if reg3 > reg5: jmp 26 (OUTEXIT)
24 addi reg1 + 1 -> reg1			// reg1++
25 seti 17 (7) reg2			// jmp INNERLOOP

OUTEXIT:
26 setr reg1 (4) reg5			// reg5 = reg1
27 seti 7 (6) reg2				// jmp OUTERLOOP

ENDCHECK
28 eqrr reg4 == reg0 -> reg1
29 addr reg1 + reg2 -> reg2
30 seti 5 (2) reg2				// jmp FUCKYLOOP
